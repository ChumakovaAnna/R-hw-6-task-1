{"version":3,"sources":["img/clockFace.svg","img/hourHand.svg","img/minuteHand.svg","img/secondHand.svg","components/Form.jsx","components/Clock.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","onSubmit","useState","name","zone","form","setForm","handleChange","evt","target","value","Number","console","log","prevForm","className","htmlFor","onChange","type","onClick","preventDefault","clock","id","nanoid","Clock","state","hour","minute","second","interval","styles","this","props","onClose","src","clockFace","alt","hourHand","style","transform","minuteHand","secondHand","hourAndZone","moment","newState","setState","number","arrow","getTime","arrowHourStyle","arrowMinuteSecondStyle","getTimeAndStyle","setInterval","clearInterval","Component","App","clocks","setClocks","handleClose","prevState","filter","item","addClock","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b38f98c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clockFace.3a875958.svg\";","module.exports = __webpack_public_path__ + \"static/media/hourHand.e9ad9691.svg\";","module.exports = __webpack_public_path__ + \"static/media/minuteHand.d5db1757.svg\";","module.exports = __webpack_public_path__ + \"static/media/secondHand.dffcd1d1.svg\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {nanoid} from 'nanoid';\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nfunction Form({ onSubmit }) {\n  const [form, setForm] = useState({\n    name: \"\",\n    zone: \"\"\n  });\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    if (name === \"zone\" && (Number(value) > 12 || Number(value) < -12)) {\n      console.log(\"Временная зона указана некорректно\");\n    }\n    setForm(prevForm => ({...prevForm, [name]: value}));\n  };\n  \n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (form.name !== \"\" && form.value !== \"\") {\n      const clock = {\n        id: nanoid(),\n        name: form.name,\n        zone: form.zone,\n      }\n\n      onSubmit(clock);\n      setForm({\n        name: \"\",\n        zone: \"\"\n      });\n    }\n  };\n\n  return (\n    <div>\n      <form name=\"clockAdd\" className=\"form\">\n        <div className=\"input\">\n          <label className=\"label\" htmlFor=\"name\">Название</label>\n          <input name=\"name\" onChange={handleChange} value={form.name}></input>\n        </div>\n        <div className=\"input\">\n          <label className=\"label\" htmlFor=\"zone\">Временная зона</label>\n          <input name=\"zone\" type=\"number\" onChange={handleChange} value={form.zone}></input>\n        </div>\n        <button className=\"button\" onClick={handleSubmit}>Добавить</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport clockFace from \"../img/clockFace.svg\";\nimport hourHand from \"../img/hourHand.svg\";\nimport minuteHand from \"../img/minuteHand.svg\";\nimport secondHand from \"../img/secondHand.svg\";\nimport moment from \"moment\";\n\n\nclass Clock extends Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    zone: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n  };\n\n  constructor({id, name, zone}) {\n    super();\n    this.id = id;\n    this.zone = Number(zone);\n    this.name = name;\n    this.state = {\n      hour: 0,\n      minute: 0,\n      second: 0,\n    };\n    this.interval = null;\n    this.styles = {\n      hour: null,\n      minute: null,\n      second: null\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"clock\">\n        <div className=\"nameAndClose\">\n          <span>{this.name}</span>\n          <button className=\"close\" onClick={() => this.props.onClose(this.id)}>X</button>\n        </div>\n        <div className=\"clockFace_container\">\n          <img src={clockFace} alt=\"clock face\"/>\n          <div>\n            <img src={hourHand} style={{transform: `${this.styles.hour}`}} className=\"hands hours\" alt=\"hour hand\" />\n            <img src={minuteHand} style={{transform: `${this.styles.minute}`}} className=\"hands minute\" alt=\"minute hand\" />\n            <img src={secondHand} style={{transform: `${this.styles.second}`}} className=\"hands second\" alt=\"second hand\" />\n          </div>\n        </div>\n        <span>{this.state.hour}:{this.state.minute}:{this.state.second}</span>\n      </div>\n    );\n  }\n\n  getTime() {\n    const hourAndZone = moment().hour() + this.zone;\n    const hour = hourAndZone > 23 ? hourAndZone - 23 : hourAndZone;\n    const newState = {\n      hour: hour,\n      minute: moment().minute(),\n      second: moment().second()\n    }\n\n    this.setState(newState);\n  }\n\n  arrowHourStyle() {\n    const number = this.state.hour < 12 ? (360 / 12 * this.state.hour) : (360 / 12 * (this.state.hour - 12));\n    this.styles.hour = `rotate(${number}deg)`;\n  }\n  \n  arrowMinuteSecondStyle(arrow) {\n    const number = 360 / 60 * this.state[arrow]\n    this.styles[arrow] = `rotate(${number}deg)`;\n  }\n\n  getTimeAndStyle() {\n    this.getTime();\n    this.arrowHourStyle()\n    this.arrowMinuteSecondStyle(\"minute\")\n    this.arrowMinuteSecondStyle(\"second\")\n  }\n\n  componentDidMount() {\n    this.getTimeAndStyle();\n    this.interval = setInterval(() => this.getTimeAndStyle(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n}\n\nexport default Clock;","import React, {useState} from 'react';\nimport './App.css';\nimport Form from \"./components/Form\"\nimport Clock from \"./components/Clock\"\n\nfunction App() {\n  const [clocks, setClocks] = useState([]);\n\n  const handleSubmit = (addClock) => {\n    setClocks(prevState => [...prevState, addClock]);\n  };\n\n  const handleClose = (id) => {\n    setClocks(prevState => (prevState.filter(item => item.id !== id)));\n  }\n\n  return (\n    <div className=\"App\">\n      <Form onSubmit={handleSubmit}></Form>\n      <div className=\"clocks_container\">\n        {clocks.map(item => <Clock key={item.id} {...item} onClose={handleClose}></Clock>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}